Description: CICD pipeline for cfn
Parameters:
  GithubToken:
    Type: String
    NoEcho: true
    Description: OAuth token for the Github organization.  Needs read/write access to repos and repo hooks

  GithubOwner:
    Type: String
    Description: Owner of the github repository to track

  GithubRepo:
    Type: String
    Description: Name of the github repository to track

  GithubBranch:
    Type: String
    Description: Name of the github branch to track

Resources:
  ArtifactStore:
    Type: AWS::S3::Bucket

  ArtifactStorePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactStore
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: s3:*Object
            Resource:
              - !Sub arn:aws:s3:::${ArtifactStore}
              - !Sub arn:aws:s3:::${ArtifactStore}/*
            Principal:
              AWS:
                - !Ref AWS::AccountId
                - !ImportValue cfn-metadata:DevAgentRoleArn
                - !ImportValue cfn-metadata:ProdAgentRoleArn

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-build
      BadgeEnabled: true
      ServiceRole: !ImportValue cfn-utilities:BuilderRoleArn
      EncryptionKey: !ImportValue cfn-utilities:ArtifactKeyArn
      Environment:
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: ARTIFACT_STORE
            Value: !Ref ArtifactStore
        Type: LINUX_CONTAINER
      Cache:
        Type: LOCAL
        Modes:
          - LOCAL_DOCKER_LAYER_CACHE
      Artifacts:
        Type: S3
        Location: !Ref ArtifactStore
        Name: buildResults.zip
        NamespaceType: BUILD_ID
        Packaging: ZIP
      Source:
        Type: GITHUB
        Location: !Sub https://github.com/${GithubOwner}/${GithubRepo}.git
        ReportBuildStatus: true

  TestReportGroup:
    Type: AWS::CodeBuild::ReportGroup
    Properties:
      Type: TEST
      Name: !Sub ${AWS::StackName}-test-results
      ExportConfig:
        ExportConfigType: S3
        S3Destination:
          Bucket: !Ref ArtifactStore
          Path: test-reports/
          Packaging: ZIP
          EncryptionKey: !ImportValue cfn-utilities:ArtifactKeyArn

  SupersessionQueue:
    Type: AWS::SQS::Queue
    Properties:
      ContentBasedDeduplication: true
      FifoQueue: true
      MessageRetentionPeriod: 1209600

  SupersessionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !ImportValue cfn-core:DeploymentSupersessionFunctionArn
      EventSourceArn: !GetAtt SupersessionQueue.Arn

  DeploymentQueue:
    Type: AWS::SQS::Queue
    Properties:
      ContentBasedDeduplication: true
      VisibilityTimeout: 3600
      FifoQueue: true
      MessageRetentionPeriod: 1209600

  DeploymentEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !ImportValue cfn-core:StackDeploymentFunctionArn
      EventSourceArn: !GetAtt DeploymentQueue.Arn

  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !ImportValue cfn-utilities:MasterRoleArn
      StateMachineName: !Sub ${AWS::StackName}-pipeline
      DefinitionString: !Sub
        - |
          {
            "StartAt": "Build",
            "States": {
              "Build": {
                "Type": "Task",
                "Resource": "arn:aws:states:::codebuild:startBuild.sync",
                "Parameters": {
                  "ProjectName": "${BuildProject}",
                  "SourceVersion.$": "$.head_commit.id"
                },
                "ResultPath": "$.BuildOutput",
                "Next": "On Default Branch?"
              },
              "On Default Branch?": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.on_default_branch",
                    "BooleanEquals": true,
                    "Next": "Check if Superseded"
                  },
                  {
                    "Variable": "$.on_default_branch",
                    "BooleanEquals": false,
                    "Next": "Success"
                  }
                ]
              },
              "Check if Superseded": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
                "ResultPath": "$.SupersededOutput",
                "Next": "Was Superseded?",
                "Parameters": {
                  "QueueUrl": "${SupersessionQueue}",
                  "MessageGroupId": "${GithubRepo}",
                  "MessageBody": {
                    "Pipeline": "${GithubRepo}",
                    "CommitTimestamp.$": "$.head_commit.timestamp",
                    "Token.$": "$$.Task.Token"
                  }
                }
              },
              "Was Superseded?": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.SupersededOutput.Superseded",
                    "BooleanEquals": true,
                    "Next": "Success"
                  },
                  {
                    "Variable": "$.SupersededOutput.Superseded",
                    "BooleanEquals": false,
                    "Next": "Retrieve Network Config"
                  }
                ]
              },
              "Retrieve Network Config": {
                "Type": "Task",
                "Resource": "${FileFromZipArn}",
                "ResultPath": "$.NetworkingConfig",
                "Parameters": {
                  "ZipLocation.$": "$.BuildOutput.Build.Artifacts.Location",
                  "Filename": "Networking.config.json"
                },
                "Next": "Deploy Utilities to Shared"
              },
              "Deploy Utilities to Shared": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
                "ResultPath": "$.UtilityOutputs.Shared",
                "Parameters": {
                  "QueueUrl": "${DeploymentQueue}",
                  "MessageGroupId": "${GithubRepo}",
                  "MessageBody": {
                    "StackName": "cfn-utilities",
                    "ZipLocation.$": "$.BuildOutput.Build.Artifacts.Location",
                    "TemplateFileName": "Utilities.template.yml",
                    "RoleArn": "${SharedRoleArn}",
                    "Token.$": "$$.Task.Token",
                    "Capabilities": ["CAPABILITY_NAMED_IAM"],
                    "EnvironmentName": "shared",
                    "CommitInfo": {
                      "GithubOwner": "${GithubOwner}",
                      "GithubRepository": "${GithubRepo}",
                      "GithubRef.$": "$.head_commit.id"
                    }
                  }
                },
                "Next": "Deploy Utilities to Agents"
              },
              "Deploy Utilities to Agents": {
                "Type": "Parallel",
                "ResultPath": "$.UtilityOutputs.Agents",
                "Branches": [
                  {
                    "StartAt": "Dev",
                    "States": {
                      "Dev": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
                        "Parameters": {
                          "QueueUrl": "${DeploymentQueue}",
                          "MessageGroupId": "${GithubRepo}-utilities-dev",
                          "MessageBody": {
                            "StackName": "cfn-utilities",
                            "ZipLocation.$": "$.BuildOutput.Build.Artifacts.Location",
                            "TemplateFileName": "Utilities.template.yml",
                            "RoleArn": "${DevRoleArn}",
                            "Token.$": "$$.Task.Token",
                            "ParameterOverrides": {
                              "MasterAccountId": "${AWS::AccountId}",
                              "NetworkCidr": "10.2.0.0/16",
                              "PeeringConnectionId.$": "$.NetworkingConfig.DevPeeringConnectionId"
                            },
                            "Capabilities": ["CAPABILITY_NAMED_IAM"],
                            "EnvironmentName": "dev",
                            "CommitInfo": {
                              "GithubOwner": "${GithubOwner}",
                              "GithubRepository": "${GithubRepo}",
                              "GithubRef.$": "$.head_commit.id"
                            }
                          }
                        },
                        "End": true
                      }
                    }
                  },
                  {
                    "StartAt": "Prod",
                    "States": {
                      "Prod": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
                        "Parameters": {
                          "QueueUrl": "${DeploymentQueue}",
                          "MessageGroupId": "${GithubRepo}-utilities-prod",
                          "MessageBody": {
                            "StackName": "cfn-utilities",
                            "ZipLocation.$": "$.BuildOutput.Build.Artifacts.Location",
                            "TemplateFileName": "Utilities.template.yml",
                            "RoleArn": "${ProdRoleArn}",
                            "Token.$": "$$.Task.Token",
                            "ParameterOverrides": {
                              "MasterAccountId": "${AWS::AccountId}",
                              "NetworkCidr": "10.3.0.0/16",
                              "PeeringConnectionId.$": "$.NetworkingConfig.ProdPeeringConnectionId"
                            },
                            "Capabilities": ["CAPABILITY_NAMED_IAM"],
                            "EnvironmentName": "prod",
                            "CommitInfo": {
                              "GithubOwner": "${GithubOwner}",
                              "GithubRepository": "${GithubRepo}",
                              "GithubRef.$": "$.head_commit.id"
                            }
                          }
                        },
                        "End": true 
                      }
                    }
                  }
                ],
                "Next": "Deploy DNS"
              },
              "Deploy DNS": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
                "ResultPath": null,
                "Parameters": {
                  "QueueUrl": "${DeploymentQueue}",
                  "MessageGroupId": "${GithubRepo}",
                  "MessageBody": {
                    "StackName": "cfn-dns",
                    "ZipLocation.$": "$.BuildOutput.Build.Artifacts.Location",
                    "TemplateFileName": "Dns.template.yml",
                    "TemplateConfigurationFileName": "Dns.config.json",
                    "RoleArn": "${SharedRoleArn}",
                    "Token.$": "$$.Task.Token",
                    "Capabilities": ["CAPABILITY_IAM"],
                    "EnvironmentName": "shared",
                    "CommitInfo": {
                      "GithubOwner": "${GithubOwner}",
                      "GithubRepository": "${GithubRepo}",
                      "GithubRef.$": "$.head_commit.id"
                    }
                  }
                },
                "Next": "Deploy Gateway"
              },
              "Deploy Gateway": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
                "ResultPath": null,
                "Parameters": {
                  "QueueUrl": "${DeploymentQueue}",
                  "MessageGroupId": "${GithubRepo}",
                  "MessageBody": {
                    "StackName": "cfn-gateway",
                    "ZipLocation.$": "$.BuildOutput.Build.Artifacts.Location",
                    "TemplateFileName": "Gateway.template.yml",
                    "RoleArn": "${SharedRoleArn}",
                    "Token.$": "$$.Task.Token",
                    "Capabilities": ["CAPABILITY_IAM"],
                    "EnvironmentName": "shared",
                    "CommitInfo": {
                      "GithubOwner": "${GithubOwner}",
                      "GithubRepository": "${GithubRepo}",
                      "GithubRef.$": "$.head_commit.id"
                    }
                  }
                },
                "Next": "Deploy Core"
              },
              "Deploy Core": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
                "ResultPath": null,
                "Parameters": {
                  "QueueUrl": "${DeploymentQueue}",
                  "MessageGroupId": "${GithubRepo}",
                  "MessageBody": {
                    "StackName": "cfn-core",
                    "ZipLocation.$": "$.BuildOutput.Build.Artifacts.Location",
                    "TemplateFileName": "Core.template.yml",
                    "TemplateConfigurationFileName": "Core.config.json",
                    "RoleArn": "${SharedRoleArn}",
                    "Token.$": "$$.Task.Token",
                    "ParameterOverrides": {
                      "DevVpcId.$": "$.UtilityOutputs.Agents[0].VpcId",
                      "ProdVpcId.$": "$.UtilityOutputs.Agents[1].VpcId",
                      "DevLoadBalancerDnsName.$": "$.UtilityOutputs.Agents[0].LoadBalancerDnsName",
                      "ProdLoadBalancerDnsName.$": "$.UtilityOutputs.Agents[1].LoadBalancerDnsName"
                    },
                    "Capabilities": ["CAPABILITY_IAM", "CAPABILITY_AUTO_EXPAND"],
                    "EnvironmentName": "shared",
                    "CommitInfo": {
                      "GithubOwner": "${GithubOwner}",
                      "GithubRepository": "${GithubRepo}",
                      "GithubRef.$": "$.head_commit.id"
                    }
                  }
                },
                "Next": "Success"
              },
              "Success": {
                "Type": "Succeed"
              }
            }
          }
        - DevRoleArn: !ImportValue cfn-metadata:DevAgentRoleArn
          ProdRoleArn: !ImportValue cfn-metadata:ProdAgentRoleArn
          SharedRoleArn: !ImportValue cfn-utilities:MasterRoleArn
          FileFromZipArn: !ImportValue cfn-core:ExtractFileFromZipFunctionArn
