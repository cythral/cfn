Transform: AWS::Serverless-2016-10-31
Parameters:
  GithubOwner:
    Type: String
    Description: Organization/user that owns repositories the CICD webhook will handle.

  GithubToken:
    Type: String
    NoEcho: true
    Description: Encrypted Github token

  GithubSigningSecret:
    Type: String
    NoEcho: true
    Description: Encrypted signing secret Github uses to sign requests with.

  TemplateFilename:
    Type: String
    Description: Filename of cicd templates to look for in repositories
  
  StackSuffix:
    Type: String
    Description: Suffix to append to the repository name when creating cicd stacks

  DevVpcId:
    Type: String
    Default: ""
    Description: ID of the VPC to peer to in dev

Conditions:
  SetupDevAccount: !Not [ !Equals [ !Ref DevVpcId, "" ] ]

Resources:
  SSLCertificate:
    Type: Custom::Certificate
    Properties:
      ServiceToken: !ImportValue cfn-resources:CertificateLambdaArn
      DomainName: brigh.id
      HostedZoneId: !ImportValue cfn-dns:HostedZoneId
      ValidationMethod: DNS
      SubjectAlternativeNames:
        - dev.brigh.id
    
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: dualstack
      SecurityGroups:
        - !ImportValue cfn-utilities:WebSecurityGroupId
      Subnets: !Split [",", !ImportValue cfn-utilities:SubnetIds]

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            StatusCode: HTTP_301
            Protocol: HTTPS
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: "404"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificate

  DevPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Condition: SetupDevAccount
    Properties:
      PeerOwnerId: "{{resolve:ssm:DevAccountId:1}}"
      PeerRoleArn: "{{resolve:ssm:DevAgentRoleArn:1}}"
      PeerVpcId: !Ref DevVpcId
      VpcId: !ImportValue cfn-utilities:VpcId

  DevPeeringRoute:
    Type: AWS::EC2::Route
    Condition: SetupDevAccount
    Properties:
     DestinationCidrBlock: 10.2.0.0/16
     RouteTableId: !ImportValue cfn-utilities:RouteTableId
     VpcPeeringConnectionId: !Ref DevPeeringConnection

  DevListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: SetupDevAccount
    Properties:
      ListenerArn: !Ref HttpsListener
      Priority: 2
      Actions:
        - Type: forward
          TargetGroupArn: !Ref DevTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - dev.*

  DevTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: SetupDevAccount
    Properties:
      TargetType: ip
      VpcId: !ImportValue cfn-utilities:VpcId
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: 10.2.12.92
          AvailabilityZone: all

  DevDnsRecords:
    Type: AWS::Route53::RecordSetGroup
    Condition: SetupDevAccount
    Properties:
      HostedZoneId: !ImportValue cfn-dns:HostedZoneId
      RecordSets:
        - Name: dev.brigh.id
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
            DNSName: !GetAtt LoadBalancer.DNSName
        - Name: dev.brigh.id
          Type: AAAA
          AliasTarget:
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
            DNSName: !GetAtt LoadBalancer.DNSName

  ProdDnsRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !ImportValue cfn-dns:HostedZoneId
      RecordSets:
        - Name: brigh.id
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
            DNSName: !GetAtt LoadBalancer.DNSName
        - Name: brigh.id
          Type: AAAA
          AliasTarget:
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
            DNSName: !GetAtt LoadBalancer.DNSName

  GithubWebhook:
    Type: AWS::Serverless::Function
    Properties:
      Handler: GithubWebhook
      Runtime: provided
      Timeout: 30
      CodeUri: bin/Release/netcoreapp3.0/linux-x64/publish/
      MemorySize: 256
      Policies:
        - AWSLambdaExecute
        - AdministratorAccess
        - !ImportValue cfn-utilities:SecretsKeyDecryptPolicyArn
      AutoPublishAlias: GithubWebhook
      Environment:
        Variables:
          GITHUB_OWNER: !Ref GithubOwner
          GITHUB_TOKEN: !Ref GithubToken
          GITHUB_SIGNING_SECRET: !Ref GithubSigningSecret
          TEMPLATE_FILENAME: !Ref TemplateFilename
          STACK_SUFFIX: !Ref StackSuffix

  GithubWebhookPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GithubWebhook.Alias
      Principal: elasticloadbalancing.amazonaws.com
      SourceArn: !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/cfn-core-GithubWebhook/*

  GithubWebhookTarget:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: GithubWebhookPermission
    Properties:
      Name: cfn-core-GithubWebhook
      TargetType: lambda
      TargetGroupAttributes:
        - Key: lambda.multi_value_headers.enabled
          Value: false
      Targets:
        - Id: !Ref GithubWebhook.Alias

  GithubWebhookListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HttpsListener
      Priority: 1
      Actions:
        - Type: forward
          TargetGroupArn: !Ref GithubWebhookTarget
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - brigh.id
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /webhooks/github

Outputs:
  HttpsListenerArn:
    Value: !Ref HttpsListener
    Description: ARN of the primary load balancer's HTTPS listener
    Export:
      Name: !Sub ${AWS::StackName}:HttpsListenerArn

  PeeringConnectionId:
    Value: !Ref PeeringConnectionId
    Description: Id of the peering connection to the agent accounts
    Export:
      Name: !Sub ${AWS::StackName}:PeeringConnectionId