Description: Core CloudFormation services including webhooks and alarms
Transform: AWS::Serverless-2016-10-31
Parameters:
  GithubOwner:
    Type: String
    Description: Organization/user that owns repositories the CICD webhook will handle.

  GithubToken:
    Type: String
    NoEcho: true
    Description: Encrypted Github token

  GithubSigningSecret:
    Type: String
    NoEcho: true
    Description: Encrypted signing secret Github uses to sign requests with.

  TemplateFilename:
    Type: String
    Description: Filename of cicd templates to look for in repositories

  StackSuffix:
    Type: String
    Description: Suffix to append to the repository name when creating cicd stacks

  DevVpcId:
    Type: String
    Default: ""
    Description: ID of the VPC to peer to in dev

  ProdVpcId:
    Type: String
    Default: ""
    Description: ID of the VPC to peer to in prod

  DevLoadBalancerDnsName:
    Type: String
    Default: ""
    Description: DNS name of the dev load balancer

  ProdLoadBalancerDnsName:
    Type: String
    Default: ""
    Description: DNS name of the prod load balancer

Conditions:
  SetupDevAccount: !Not
    - !Equals
      - !Ref DevVpcId
      - ""

  SetupProdAccount: !Not
    - !Equals
      - !Ref ProdVpcId
      - ""

Resources:
  Certificate:
    Type: Custom::Certificate
    Properties:
      ServiceToken: !ImportValue cfn-certificate-resource:CertificateLambdaArn
      DomainName: brigh.id
      HostedZoneId: !ImportValue cfn-dns:HostedZoneId
      ValidationMethod: DNS
      SubjectAlternativeNames:
        - "*.brigh.id"
        - "*.dev.brigh.id"

  LoadBalancerLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 14

  LoadBalancerLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LoadBalancerLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: s3:PutObject
            Principal:
              AWS: arn:aws:iam::127311923021:root
            Resource: !Sub arn:aws:s3:::${LoadBalancerLogsBucket}/AWSLogs/${AWS::AccountId}/*
          - Effect: Allow
            Action: s3:PutObject
            Principal:
              Service: delivery.logs.amazonaws.com
            Resource: !Sub arn:aws:s3:::${LoadBalancerLogsBucket}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          - Effect: Allow
            Action: s3:GetBucketAcl
            Principal:
              Service: delivery.logs.amazonaws.com
            Resource: !Sub arn:aws:s3:::${LoadBalancerLogsBucket}

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - LoadBalancerLogsBucketPolicy
    Properties:
      IpAddressType: dualstack
      SecurityGroups:
        - !ImportValue cfn-utilities:WebSecurityGroupId
      Subnets: !Split [",", !ImportValue cfn-utilities:SubnetIds]
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value: !Ref LoadBalancerLogsBucket

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            StatusCode: HTTP_301
            Protocol: HTTPS
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - !If
          - SetupProdAccount
          - Type: forward
            TargetGroupArn: !Ref ProdTargetGroup
          - Type: fixed-response
            FixedResponseConfig:
              StatusCode: "404"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate

  DevPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Condition: SetupDevAccount
    Properties:
      PeerOwnerId: !ImportValue cfn-metadata:DevAccountId
      PeerRoleArn: !ImportValue cfn-metadata:DevAgentRoleArn
      PeerVpcId: !Ref DevVpcId
      VpcId: !ImportValue cfn-utilities:VpcId

  DevPeeringRoute:
    Type: AWS::EC2::Route
    Condition: SetupDevAccount
    Properties:
      DestinationCidrBlock: 10.2.0.0/16
      RouteTableId: !ImportValue cfn-utilities:RouteTableId
      VpcPeeringConnectionId: !Ref DevPeeringConnection

  DevListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: SetupDevAccount
    Properties:
      ListenerArn: !ImportValue cfn-gateway:HttpsListenerArn
      Priority: 2
      Actions:
        - Type: authenticate-oidc
          Order: 1
          AuthenticateOidcConfig:
            Issuer: https://accounts.google.com
            AuthorizationEndpoint: https://accounts.google.com/o/oauth2/v2/auth
            TokenEndpoint: https://oauth2.googleapis.com/token
            UserInfoEndpoint: https://openidconnect.googleapis.com/v1/userinfo
            ClientId: !ImportValue sso-aws-registry:DevGoogleClientId
            ClientSecret: !GetAtt DecryptedDevClientSecret.Plaintext
            SessionTimeout: 86400
        - Type: forward
          Order: 2
          TargetGroupArn: !ImportValue cfn-gateway:DevTargetGroupArn
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - "dev.*"
              - "*.dev.*"

  DecryptedDevClientSecret:
    Type: Custom::Secret
    Properties:
      ServiceToken: !ImportValue cfn-secret-resource:SecretLambdaArn
      Ciphertext: !ImportValue sso-aws-registry:DevGoogleClientSecret

  DevTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: SetupDevAccount
    Properties:
      TargetType: ip
      VpcId: !ImportValue cfn-utilities:VpcId
      Port: 80
      HealthCheckPath: /healthcheck
      Protocol: HTTP

  DevTargetGroupAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: SetupDevAccount
    Properties:
      AlarmDescription: Dev load balancer target health
      AlarmActions:
        - !Ref UpdateTargetsTopic
      Threshold: 2.0
      TreatMissingData: breaching
      EvaluationPeriods: 1
      ComparisonOperator: LessThanOrEqualToThreshold
      Metrics:
        - Id: healthyfactor
          Expression: MIN([healthy - unhealthy, unhealthy])
          ReturnData: true
        - Id: unhealthy
          MetricStat:
            Metric:
              Namespace: AWS/ApplicationELB
              MetricName: UnHealthyHostCount
              Dimensions:
                - Name: LoadBalancer
                  Value: !ImportValue cfn-gateway:LoadBalancerFullName
                - Name: TargetGroup
                  Value: !ImportValue cfn-gateway:DevTargetGroupFullName
            Stat: Maximum
            Period: 60
          ReturnData: false
        - Id: healthy
          MetricStat:
            Metric:
              Namespace: AWS/ApplicationELB
              MetricName: HealthyHostCount
              Dimensions:
                - Name: LoadBalancer
                  Value: !ImportValue cfn-gateway:LoadBalancerFullName
                - Name: TargetGroup
                  Value: !ImportValue cfn-gateway:DevTargetGroupFullName
            Stat: Maximum
            Period: 60
          ReturnData: false
        - Id: customdata
          MetricStat:
            Metric:
              Namespace: CustomData
              MetricName: CustomData
              Dimensions:
                - Name: TargetGroupArn
                  Value: !ImportValue cfn-gateway:DevTargetGroupArn
                - Name: TargetDnsName
                  Value: !Ref DevLoadBalancerDnsName
            Stat: Maximum
            Period: 60
          ReturnData: false

  DevDnsRecords:
    Type: AWS::Route53::RecordSetGroup
    DeletionPolicy: Retain
    Properties:
      HostedZoneId: !ImportValue cfn-dns:HostedZoneId
      RecordSets:
        - Name: dev.brigh.id
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
            DNSName: !GetAtt LoadBalancer.DNSName
        - Name: dev.brigh.id
          Type: AAAA
          AliasTarget:
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
            DNSName: !GetAtt LoadBalancer.DNSName

  ProdPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Condition: SetupProdAccount
    Properties:
      PeerOwnerId: !ImportValue cfn-metadata:ProdAccountId
      PeerRoleArn: !ImportValue cfn-metadata:ProdAgentRoleArn
      PeerVpcId: !Ref ProdVpcId
      VpcId: !ImportValue cfn-utilities:VpcId

  ProdPeeringRoute:
    Type: AWS::EC2::Route
    Condition: SetupProdAccount
    Properties:
      DestinationCidrBlock: 10.3.0.0/16
      RouteTableId: !ImportValue cfn-utilities:RouteTableId
      VpcPeeringConnectionId: !Ref ProdPeeringConnection

  ProdTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: SetupProdAccount
    Properties:
      TargetType: ip
      VpcId: !ImportValue cfn-utilities:VpcId
      HealthCheckPath: /healthcheck
      Port: 80
      Protocol: HTTP

  ProdTargetGroupAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: SetupProdAccount
    Properties:
      AlarmDescription: Prod load balancer target health
      AlarmActions:
        - !Ref UpdateTargetsTopic
      Threshold: 2.0
      EvaluationPeriods: 1
      TreatMissingData: breaching
      ComparisonOperator: LessThanOrEqualToThreshold
      Metrics:
        - Id: healthyfactor
          Expression: MIN([healthy - unhealthy, unhealthy])
          ReturnData: true
        - Id: unhealthy
          MetricStat:
            Metric:
              Namespace: AWS/ApplicationELB
              MetricName: UnHealthyHostCount
              Dimensions:
                - Name: LoadBalancer
                  Value: !ImportValue cfn-gateway:LoadBalancerFullName
                - Name: TargetGroup
                  Value: !ImportValue cfn-gateway:ProdTargetGroupFullName
            Stat: Maximum
            Period: 60
          ReturnData: false
        - Id: healthy
          MetricStat:
            Metric:
              Namespace: AWS/ApplicationELB
              MetricName: HealthyHostCount
              Dimensions:
                - Name: LoadBalancer
                  Value: !ImportValue cfn-gateway:LoadBalancerFullName
                - Name: TargetGroup
                  Value: !ImportValue cfn-gateway:ProdTargetGroupFullName
            Stat: Maximum
            Period: 60
          ReturnData: false
        - Id: customdata
          MetricStat:
            Metric:
              Namespace: CustomData
              MetricName: CustomData
              Dimensions:
                - Name: TargetGroupArn
                  Value: !ImportValue cfn-gateway:ProdTargetGroupArn
                - Name: TargetDnsName
                  Value: !Ref ProdLoadBalancerDnsName
            Stat: Maximum
            Period: 60
          ReturnData: false

  ProdDnsRecords:
    Type: AWS::Route53::RecordSetGroup
    DeletionPolicy: Retain
    Properties:
      HostedZoneId: !ImportValue cfn-dns:HostedZoneId
      RecordSets:
        - Name: brigh.id
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
            DNSName: !GetAtt LoadBalancer.DNSName
        - Name: brigh.id
          Type: AAAA
          AliasTarget:
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
            DNSName: !GetAtt LoadBalancer.DNSName

  GithubWebhook:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Core::Cythral.CloudFormation.GithubWebhook.Handler::Handle
      Runtime: dotnetcore3.1
      Timeout: 30
      CodeUri: bin/Release/netcoreapp3.0/linux-x64/publish/
      MemorySize: 256
      Policies:
        - AWSLambdaExecute
        - !Ref GithubWebhookPolicy
        - !ImportValue cfn-utilities:SecretsKeyDecryptPolicyArn
      AutoPublishAlias: GithubWebhook
      Environment:
        Variables:
          GITHUB_OWNER: !Ref GithubOwner
          GITHUB_TOKEN: !Ref GithubToken
          GITHUB_SIGNING_SECRET: !Ref GithubSigningSecret
          TEMPLATE_FILENAME: !Ref TemplateFilename
          STACK_SUFFIX: !Ref StackSuffix
          ROLE_ARN: !ImportValue cfn-utilities:MasterRoleArn
          AWS_ACCOUNT_ID: !Ref AWS::AccountId
          LAMBDA_NET_SERIALIZER_DEBUG: "true"

  GithubWebhookPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - cloudformation:CreateStack
              - cloudformation:UpdateStack
              - cloudformation:DescribeStacks
              - states:StartExecution
            Resource: "*"
          - Effect: Allow
            Action: iam:PassRole
            Resource: !ImportValue cfn-utilities:MasterRoleArn

  GithubWebhookPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GithubWebhook.Alias
      Principal: elasticloadbalancing.amazonaws.com
      SourceArn: !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/cfn-core-GithubWebhookTarget/*

  GithubWebhookTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: GithubWebhookPermission
    Properties:
      Name: cfn-core-GithubWebhookTarget
      TargetType: lambda
      TargetGroupAttributes:
        - Key: lambda.multi_value_headers.enabled
          Value: false
      Targets:
        - Id: !Ref GithubWebhook.Alias

  GithubWebhookListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !ImportValue cfn-gateway:HttpsListenerArn
      Priority: 1
      Actions:
        - Type: forward
          TargetGroupArn: !Ref GithubWebhookTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - brigh.id
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /webhooks/github

  UpdateTargetsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Core::Cythral.CloudFormation.UpdateTargets.Handler::Handle
      Runtime: dotnetcore3.1
      Timeout: 30
      CodeUri: bin/Release/netcoreapp3.0/linux-x64/publish/
      Policies:
        - AWSLambdaExecute
        - !Ref UpdateTargetsPolicy
      Environment:
        Variables:
          LAMBDA_NET_SERIALIZER_DEBUG: "true"
      Events:
        SNS:
          Type: SNS
          Properties:
            Topic: !Ref UpdateTargetsTopic
            Region: !Ref AWS::Region

  UpdateTargetsTopic:
    Type: AWS::SNS::Topic

  UpdateTargetsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - elasticloadbalancing:DescribeTargetHealth
              - elasticloadbalancing:RegisterTargets
              - elasticloadbalancing:DeregisterTargets
            Resource: "*"

  StackDeploymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Core::Cythral.CloudFormation.StackDeployment.Handler::Handle
      Runtime: dotnetcore3.1
      Timeout: 300
      CodeUri: bin/Release/netcoreapp3.0/linux-x64/publish/
      Role: !ImportValue cfn-utilities:MasterRoleArn
      Environment:
        Variables:
          NOTIFICATION_ARN: !Ref StackDeploymentStatusTopic
          LAMBDA_NET_SERIALIZER_DEBUG: "true"
          GITHUB_TOKEN: !Ref GithubToken

  StackDeploymentFunctionRetryPolicy:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref StackDeploymentFunction
      MaximumRetryAttempts: 0
      Qualifier: $LATEST

  StackDeploymentStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Core::Cythral.CloudFormation.StackDeploymentStatus.Handler::Handle
      Runtime: dotnetcore3.1
      Timeout: 30
      CodeUri: bin/Release/netcoreapp3.0/linux-x64/publish/
      Role: !ImportValue cfn-utilities:MasterRoleArn
      Events:
        SNS:
          Type: SNS
          Properties:
            Topic: !Ref StackDeploymentStatusTopic
            Region: !Ref AWS::Region
      Environment:
        Variables:
          LAMBDA_NET_SERIALIZER_DEBUG: "true"
          GITHUB_TOKEN: !Ref GithubToken

  StackDeploymentStatusTopic:
    Type: AWS::SNS::Topic

  StackDeploymentStatusTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: "*"
            Principal:
              AWS:
                - !ImportValue cfn-metadata:DevAgentRoleArn
                - !ImportValue cfn-metadata:ProdAgentRoleArn
      Topics:
        - !Ref StackDeploymentStatusTopic

  StateStore:
    Type: AWS::S3::Bucket

  ApprovalWebhook:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Core::Cythral.CloudFormation.ApprovalWebhook.Handler::Handle
      Runtime: dotnetcore3.1
      Timeout: 30
      CodeUri: bin/Release/netcoreapp3.0/linux-x64/publish/
      MemorySize: 256
      Policies:
        - AWSLambdaExecute
        - !Ref ApprovalWebhookPolicy
      AutoPublishAlias: ApprovalWebhook
      Environment:
        Variables:
          STATE_STORE: !Ref StateStore
          LAMBDA_NET_SERIALIZER_DEBUG: "true"

  ApprovalWebhookPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - states:SendTaskSuccess
            Resource: "*"
          - Effect: Allow
            Action:
              - s3:DeleteObject
              - s3:GetObject
              - kms:Decrypt
            Resource: !Sub arn:aws:s3:::${StateStore}/*

  ApprovalWebhookPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ApprovalWebhook.Alias
      Principal: elasticloadbalancing.amazonaws.com
      SourceArn: !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/cfn-core-ApprovalWebhookTarget/*

  ApprovalWebhookTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ApprovalWebhookPermission
    Properties:
      Name: cfn-core-ApprovalWebhookTarget
      TargetType: lambda
      TargetGroupAttributes:
        - Key: lambda.multi_value_headers.enabled
          Value: false
      Targets:
        - Id: !Ref ApprovalWebhook.Alias

  ApprovalWebhookListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !ImportValue cfn-gateway:HttpsListenerArn
      Priority: 3
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ApprovalWebhookTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - brigh.id
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /webhooks/approval

  ApprovalTopic:
    Type: AWS::SNS::Topic

  ApprovalNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Core::Cythral.CloudFormation.ApprovalNotification.Handler::Handle
      Runtime: dotnetcore3.1
      Timeout: 30
      MemorySize: 256
      CodeUri: bin/Release/netcoreapp3.0/linux-x64/publish/
      Policies:
        - AWSLambdaExecute
        - !Ref ApprovalNotificationPolicy
      Environment:
        Variables:
          TOPIC_ARN: !Ref ApprovalTopic
          BASE_URL: https://brigh.id/webhooks/approval
          STATE_STORE: !Ref StateStore
          LAMBDA_NET_SERIALIZER_DEBUG: "true"

  ApprovalNotificationPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref ApprovalTopic
          - Effect: Allow
            Action:
              - states:SendTaskSuccess
            Resource: "*"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${StateStore}
              - !Sub arn:aws:s3:::${StateStore}/*

  DeploymentSupersessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Core::Cythral.CloudFormation.DeploymentSupersession.Handler::Handle
      Runtime: dotnetcore3.1
      Timeout: 30
      MemorySize: 256
      CodeUri: bin/Release/netcoreapp3.0/linux-x64/publish/
      Policies:
        - AWSLambdaExecute
        - !Ref DeploymentSupersessionPolicy
      Environment:
        Variables:
          STATE_STORE: !Ref StateStore
          LAMBDA_NET_SERIALIZER_DEBUG: "true"

  DeploymentSupersessionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - states:SendTaskSuccess
              - sqs:GetQueueAttributes
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
            Resource: "*"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${StateStore}/*

  ExtractFileFromZipFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Core::Cythral.CloudFormation.ExtractFileFromZip.Handler::Handle
      Runtime: dotnetcore3.1
      Timeout: 30
      MemorySize: 256
      CodeUri: bin/Release/netcoreapp3.0/linux-x64/publish/
      Policies:
        - AWSLambdaExecute
        - !Ref ExtractFileFromZipPolicy
      Environment:
        Variables:
          LAMBDA_NET_SERIALIZER_DEBUG: "true"

  ExtractFileFromZipPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - kms:Decrypt
            Resource: "*"

  S3DeploymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Core::Cythral.CloudFormation.S3Deployment.Handler::Handle
      Runtime: dotnetcore3.1
      Timeout: 300
      MemorySize: 256
      CodeUri: bin/Release/netcoreapp3.0/linux-x64/publish/
      Role: !ImportValue cfn-utilities:MasterRoleArn
      Environment:
        Variables:
          LAMBDA_NET_SERIALIZER_DEBUG: "true"
          GITHUB_TOKEN: !Ref GithubToken

  GithubTokenSecret:
    Type: Custom::Secret
    Properties:
      ServiceToken: !ImportValue cfn-secret-resource:SecretLambdaArn
      Ciphertext: !Ref GithubToken

  CodeBuildSourceCredential:
    Type: AWS::CodeBuild::SourceCredential
    Properties:
      Token: !GetAtt GithubTokenSecret.Plaintext
      ServerType: GITHUB
      AuthType: PERSONAL_ACCESS_TOKEN

Outputs:
  LoadBalancerCanonicalHostedZoneId:
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
    Description: ID of the canonical hosted zone for the primary load balancer
    Export:
      Name: !Sub ${AWS::StackName}:LoadBalancerCanonicalHostedZoneId

  LoadBalancerDnsName:
    Value: !GetAtt LoadBalancer.DNSName
    Description: DNS name of the primary load balancer
    Export:
      Name: !Sub ${AWS::StackName}:LoadBalancerDnsName

  CertificateArn:
    Value: !Ref Certificate
    Description: ARN of the certificate used for core services
    Export:
      Name: !Sub ${AWS::StackName}:CertificateArn

  HttpsListenerArn:
    Value: !Ref HttpsListener
    Description: ARN of the primary load balancer's HTTPS listener
    Export:
      Name: !Sub ${AWS::StackName}:HttpsListenerArn

  DevPeeringConnectionId:
    Value: !Ref DevPeeringConnection
    Condition: SetupDevAccount
    Description: Id of the peering connection with the dev account
    Export:
      Name: !Sub ${AWS::StackName}:DevPeeringConnectionId

  ProdPeeringConnectionId:
    Value: !Ref ProdPeeringConnection
    Condition: SetupProdAccount
    Description: Id of the peering connection with the prod account
    Export:
      Name: !Sub ${AWS::StackName}:ProdPeeringConnectionId

  StackDeploymentFunctionArn:
    Value: !GetAtt StackDeploymentFunction.Arn
    Description: ARN of the stack deployment function for use in step function pipelines
    Export:
      Name: !Sub ${AWS::StackName}:StackDeploymentFunctionArn

  ApprovalNotificationFunctionArn:
    Value: !GetAtt ApprovalNotificationFunction.Arn
    Description: ARN of the approval notification function for use in step function pipelines
    Export:
      Name: !Sub ${AWS::StackName}:ApprovalNotificationFunctionArn

  DeploymentSupersessionFunctionArn:
    Value: !GetAtt DeploymentSupersessionFunction.Arn
    Description: ARN of the deployment supersession function for use in step function pipelines
    Export:
      Name: !Sub ${AWS::StackName}:DeploymentSupersessionFunctionArn

  ExtractFileFromZipFunctionArn:
    Value: !GetAtt ExtractFileFromZipFunction.Arn
    Description: ARN of the file extraction function for use in step function pipelines
    Export:
      Name: !Sub ${AWS::StackName}:ExtractFileFromZipFunctionArn

  S3DeploymentFunctionArn:
    Value: !GetAtt S3DeploymentFunction.Arn
    Description: ARN of the S3 Deployment function for use in step function pipelines
    Export:
      Name: !Sub ${AWS::StackName}:S3DeploymentFunctionArn
