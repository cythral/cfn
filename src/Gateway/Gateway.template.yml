Resources:
  Certificate:
    Type: Custom::Certificate
    Properties:
      ServiceToken: !ImportValue cfn-certificate-resource:CertificateLambdaArn
      DomainName: brigh.id
      HostedZoneId: !ImportValue cfn-dns:HostedZoneId
      ValidationMethod: DNS
      SubjectAlternativeNames:
        - "*.brigh.id"
        - "*.dev.brigh.id"

  LoadBalancerLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 14

  LoadBalancerLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LoadBalancerLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: s3:PutObject
            Principal:
              AWS: arn:aws:iam::127311923021:root
            Resource: !Sub arn:aws:s3:::${LoadBalancerLogsBucket}/AWSLogs/${AWS::AccountId}/*
          - Effect: Allow
            Action: s3:PutObject
            Principal:
              Service: delivery.logs.amazonaws.com
            Resource: !Sub arn:aws:s3:::${LoadBalancerLogsBucket}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          - Effect: Allow
            Action: s3:GetBucketAcl
            Principal:
              Service: delivery.logs.amazonaws.com
            Resource: !Sub arn:aws:s3:::${LoadBalancerLogsBucket}

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - LoadBalancerLogsBucketPolicy
    Properties:
      IpAddressType: dualstack
      SecurityGroups:
        - !ImportValue cfn-utilities:WebSecurityGroupId
      Subnets: !Split
        - ","
        - !ImportValue cfn-utilities:SubnetIds
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value: !Ref LoadBalancerLogsBucket

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            StatusCode: HTTP_301
            Protocol: HTTPS
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ProdTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate

  DevTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      VpcId: !ImportValue cfn-utilities:VpcId
      Port: 80
      HealthCheckPath: /healthcheck
      Protocol: HTTP

  ProdTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      VpcId: !ImportValue cfn-utilities:VpcId
      HealthCheckPath: /healthcheck
      Port: 80
      Protocol: HTTP

  DevDnsRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !ImportValue cfn-dns:HostedZoneId
      RecordSets:
        - Name: dev.brigh.id
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
            DNSName: !Sub dualstack.${LoadBalancer.DNSName}
        - Name: dev.brigh.id
          Type: AAAA
          AliasTarget:
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
            DNSName: !Sub dualstack.${LoadBalancer.DNSName}

  ProdDnsRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !ImportValue cfn-dns:HostedZoneId
      RecordSets:
        - Name: brigh.id
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
            DNSName: !Sub dualstack.${LoadBalancer.DNSName}
        - Name: brigh.id
          Type: AAAA
          AliasTarget:
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
            DNSName: !Sub dualstack.${LoadBalancer.DNSName}

  AppMesh:
    Type: AWS::AppMesh::Mesh
    Properties:
      MeshName: brighid-mesh
      Spec:
        EgressFilter:
          Type: ALLOW_ALL
  
  AppMeshGateway:
    Type: AWS::AppMesh::VirtualGateway
    Properties:
      MeshName: !GetAtt AppMesh.MeshName
      MeshOwner: !Ref AWS::AccountId
      VirtualGatewayName: internet
      Spec:
        Listeners:
          - PortMapping:
              Port: 80
              Protocol: http2

  ResourceShare:
    Type: AWS::RAM::ResourceShare
    Properties:
      Name: brighid-mesh-share
      AllowExternalPrincipals: false
      Principals:
        - !ImportValue cfn-metadata:OrganizationArn
      ResourceArns:
        - !Ref AppMesh

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: brighid

  EnvoyService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Split
            - ","
            - !ImportValue cfn-utilities:SubnetIds
          SecurityGroups:
            - !ImportValue cfn-utilities:WebSecurityGroupId
            - !GetAtt EnvoySecurityGroup.GroupId
          AssignPublicIp: ENABLED
      TaskDefinition: !Ref EnvoyTaskDefinition
      LoadBalancers:
        - ContainerName: envoy
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      DesiredCount: 1
      DeploymentConfiguration:
        MinimumHealthyPercent: 1
        MaximumPercent: 200
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true

  EnvoySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows Envoy Health Check Traffic
      VpcId: !ImportValue cfn-utilities:VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9901
          ToPort: 9901
          CidrIp: !ImportValue cfn-utilities:Ipv4NetworkCidr

  EnvoyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "256"
      Memory: "512"
      Family: brighid-envoy
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: envoy
          Essential: true
          Image: !Sub 840364872350.dkr.ecr.${AWS::Region}.amazonaws.com/aws-appmesh-envoy:v1.17.2.0-prod
          PortMappings:
            - ContainerPort: 80
            - ContainerPort: 9901
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: brighid
          Environment:
            - Name: APPMESH_RESOURCE_ARN
              Value: !Sub mesh/${AppMesh.MeshName}/virtualGateway/${AppMeshGateway.VirtualGatewayName}

  EnvoyServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 5
      ResourceId: !Sub service/${Cluster}/${EnvoyService.Name}
      ScalableDimension: ecs:service:DesiredCount
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/AWSServiceRoleForApplicationAutoScaling_ECSService
      ServiceNamespace: ecs

  EnvoyServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: EnvoyServiceAutoScaling
      PolicyType: TargetTrackingScaling
      ResourceId: !Sub service/${Cluster}/${EnvoyService.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70
  
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ecs-tasks.amazonaws.com
  
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /brighid/envoy
      RetentionInDays: 14

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      VpcId: !ImportValue cfn-utilities:VpcId
      HealthCheckPath: /ready
      HealthCheckPort: 9901
      Protocol: HTTP
      ProtocolVersion: HTTP2
      Port: 80
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"

Outputs:
  LoadBalancerCanonicalHostedZoneId:
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
    Description: ID of the canonical hosted zone for the primary load balancer
    Export:
      Name: !Sub ${AWS::StackName}:LoadBalancerCanonicalHostedZoneId

  LoadBalancerDnsName:
    Value: !GetAtt LoadBalancer.DNSName
    Description: DNS name of the primary load balancer
    Export:
      Name: !Sub ${AWS::StackName}:LoadBalancerDnsName

  LoadBalancerFullName:
    Value: !GetAtt LoadBalancer.LoadBalancerFullName
    Description: Full name of the primary load balancer
    Export:
      Name: !Sub ${AWS::StackName}:LoadBalancerFullName

  CertificateArn:
    Value: !Ref Certificate
    Description: ARN of the certificate used for core services
    Export:
      Name: !Sub ${AWS::StackName}:CertificateArn

  HttpsListenerArn:
    Value: !Ref HttpsListener
    Description: ARN of the primary load balancer's HTTPS listener
    Export:
      Name: !Sub ${AWS::StackName}:HttpsListenerArn

  MeshTargetGroupArn:
    Value: !Ref TargetGroup
    Description: ARN of the mesh target group
    Export:
      Name: !Sub ${AWS::StackName}:MeshTargetGroupArn

  DevTargetGroupArn:
    Value: !Ref DevTargetGroup
    Description: ARN of the dev target group
    Export:
      Name: !Sub ${AWS::StackName}:DevTargetGroupArn

  DevTargetGroupFullName:
    Value: !GetAtt DevTargetGroup.TargetGroupFullName
    Description: Full name of the dev target group
    Export:
      Name: !Sub ${AWS::StackName}:DevTargetGroupFullName

  ProdTargetGroupArn:
    Value: !Ref ProdTargetGroup
    Description: ARN of the prod target group
    Export:
      Name: !Sub ${AWS::StackName}:ProdTargetGroupArn

  ProdTargetGroupFullName:
    Value: !GetAtt ProdTargetGroup.TargetGroupFullName
    Description: Full name of the prod target group
    Export:
      Name: !Sub ${AWS::StackName}:ProdTargetGroupFullName
